((let ([list (new-array 30 1)])
 (let ([temp (aset list 0 44)])
 (let ([temp (aset list 1 99)])
 (let ([temp (aset list 2 36)])
 (let ([temp (aset list 3 67)])
 (let ([temp (aset list 4 41)])
 (let ([temp (aset list 5 41)])
 (let ([temp (aset list 6 74)])
 (let ([temp (aset list 7 72)])
 (let ([temp (aset list 8 55)])
 (let ([temp (aset list 9 68)])
 (let ([temp (aset list 10 53)])
 (let ([temp (aset list 11 75)])
 (let ([temp (aset list 12 67)])
 (let ([temp (aset list 13 17)])
 (let ([temp (aset list 14 46)])
 (let ([temp (aset list 15 57)])
 (let ([temp (aset list 16 49)])
 (let ([temp (aset list 17 72)])
 (let ([temp (aset list 18 37)])
 (let ([temp (aset list 19 76)])
 (let ([temp (aset list 20 72)])
 (let ([temp (aset list 21 77)])
 (let ([temp (aset list 22 69)])
 (let ([temp (aset list 23 19)])
 (let ([temp (aset list 24 72)])
 (let ([temp (aset list 25 28)])
 (let ([temp (aset list 26 23)])
 (let ([temp (aset list 27 34)])
 (let ([temp (aset list 28 94)])
 (let ([temp (aset list 29 34)])
 (let ([temp (print list)])
 (let ([temp (:sort list)])
 (print list))))))))))))))))))))))))))))))))))
 (:sort (arr) (:sort_helper arr 0))
 (:sort_helper (arr index) (let ([len (alen arr)]) (let ([next (+ index 1)]) (let ([test (<= len index)]) (if test arr
    (let ([temp (aref arr index)]) (let ([ml (:min arr index)]) (let ([index2 (aref ml 1)]) (let ([m (aref ml 0)])
       (let ([_temp0 (aset arr index m)])
       (let ([_temp1 (aset arr index2 temp)])
       (:sort_helper arr next))) )))))))))
 (:min (arr index) (let ([n (new-tuple 100000 0)]) (:min_helper arr index n)))
 (:min_helper (arr index ret) (let ([next (+ index 1)]) (let ([len (alen arr)]) (let ([test (<= len index)])
   (if test ret (let ([potential (aref arr index)]) (let ([oldmin (aref ret 0)]) (let ([test2 (< potential oldmin)])
      (if test2 (let ([temp (aset ret 0 potential)]) (let ([temp (aset ret 1 index)]) (:min_helper arr next ret)))
                (:min_helper arr next ret))))))))))
)
