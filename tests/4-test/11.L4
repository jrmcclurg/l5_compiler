;; simple n^2 selection sort
((let ([list (new-array 30 1)])
 (begin (aset list 0 44)
 (begin (aset list 1 99)
 (begin (aset list 2 36)
 (begin (aset list 3 67)
 (begin (aset list 4 41)
 (begin (aset list 5 41)
 (begin (aset list 6 74)
 (begin (aset list 7 72)
 (begin (aset list 8 55)
 (begin (aset list 9 68)
 (begin (aset list 10 53)
 (begin (aset list 11 75)
 (begin (aset list 12 67)
 (begin (aset list 13 17)
 (begin (aset list 14 46)
 (begin (aset list 15 57)
 (begin (aset list 16 49)
 (begin (aset list 17 72)
 (begin (aset list 18 37)
 (begin (aset list 19 76)
 (begin (aset list 20 72)
 (begin (aset list 21 77)
 (begin (aset list 22 69)
 (begin (aset list 23 19)
 (begin (aset list 24 72)
 (begin (aset list 25 28)
 (begin (aset list 26 23)
 (begin (aset list 27 34)
 (begin (aset list 28 94)
 (begin (aset list 29 34)
 (begin (print list)
 (begin (:sort list)
 (print list))))))))))))))))))))))))))))))))))
 (:sort (arr) (:sort_helper arr 0))
 (:sort_helper (arr index) (if (<= (alen arr) index) arr
    (let ([temp (aref arr index)]) (let ([ml (:min arr index)]) (let ([index2 (aref ml 1)]) (let ([m (aref ml 0)])
       (begin (aset arr index m)
       (begin (aset arr index2 temp)
       (:sort_helper arr (+ index 1))))))))))
 (:min (arr index) (:min_helper arr index (new-tuple 100000 0)))
 (:min_helper (arr index ret)
   (if (<= (alen arr) index) ret (let ([potential (aref arr index)]) (let ([oldmin (aref ret 0)]) 
      (if (< potential oldmin)
         (begin (aset ret 0 potential) (begin (aset ret 1 index) (:min_helper arr (+ index 1) ret)))
         (:min_helper arr (+ index 1) ret))))))
)
