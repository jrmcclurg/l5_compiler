#####################################################################
#  EECS 322 Compiler Construction
#  Northwestern University
#  4/23/2012
#  
#  Graph Test
#  Jedidiah R. McClurg
#  v. 1.0
#####################################################################

#####################################################################
#  DESCRIPTION
#####################################################################

This is a test for the L2 "graph" function.  It takes a file having
the following format

(i ...)

Where
(i ...) is a list of L2 instructions.  The result is in one of the
two following forms, where the "var" are variable names

((var var ...) ...)
((var reg) ...)

-- OR --

((var var ...) ...)
#f

In both cases, the first list corresponds to the adjacency info for
the graph, with each item of the form (src dest1 dest2 dest3 ...).
The second list corresponds to the graph coloring (or #f if the
graph is not able to be colored).  Each item in this list is of the
form (var reg) where var is a variable name, and reg is the "color"
(i.e. register name).

The project is implemented in OCaml and consists of the following
files:

GRAPH_README	    - this file
graph               - the liveness test binary (64bit Linux)
Makefile            - GNU makefile for the project
liveness_lexer.mll  - ocamllex lexer specification
liveness_parser.mly - ocamlyacc parser specification
graph_main.ml       - program entry-point
l2_ast.ml           - abstract data types for the Abstract Syntax Tree
l2_code.ml          - code-generation and compilation utilities
utils.ml            - general utilities

#####################################################################
#  INSTALLATION
#####################################################################

The project has been built/tested only on 64bit Linux.  Thus,
the included graph binary will work only on 64bit systems.

For building the project on other systems, the necessary packages are
the ocaml package for the OCaml development tools, the gcc package
for the GNU C compiler development tools, and possibly the
gcc-multilib package to provide gcc with 32bit support.

To build, simply type
  make

This should generate the Graph Test binary, graph.  After this,
typing
  make clean
should clear out any intermediate build files.

#####################################################################
#  USAGE
#####################################################################

Given a graph test case test.L2f, the test can be run by typing
  ./graph test.L2f

This should output the test results.

If graph is run with no command-line options, it reads the test case
file from stdin.
