#####################################################################
#  EECS 322 Compiler Construction
#  Northwestern University
#  5/14/2012
#  
#  L4-to-L3 Compiler
#  Jedidiah R. McClurg
#  v. 1.0
#####################################################################

#####################################################################
#  DESCRIPTION
#####################################################################

This is a compiler for the L4 language.  It does does some program
transformations and outputs an equivalent L3 program.

The project is implemented in OCaml and consists of the following
files:

L4_README	    - this file
L4c                 - the L4 compiler binary (64bit Linux)
Makefile            - GNU makefile for the project
l4_lexer.mll        - ocamllex lexer specification
l4_parser.mly       - ocamlyacc parser specification
l4_main.ml          - program entry-point
l4_ast.ml           - abstract data types for the L4 AST
l4_code.ml          - code-generation and compilation utilities
l3_ast.ml           - abstract data types for the L3 AST
l3_code.ml          - code-generation and compilation utilities
l2_ast.ml           - abstract data types for the L2 AST
l2_code.ml          - code-generation and compilation utilities
l1_ast.ml           - abstract data types for the L1 AST
l1_code.ml          - code-generation and compilation utilities
utils.ml            - general utilities

#####################################################################
#  INSTALLATION
#####################################################################

The project has been built/tested only on 64bit Linux.  Thus,
the included L4c binary will work only on 64bit systems.

For building the project on other systems, the necessary packages are
the ocaml package for the OCaml development tools, the gcc package
for the GNU C compiler development tools, and possibly the
gcc-multilib package to provide gcc with 32bit support.

To build, simply type
  make

This should generate the L4 Compiler binary, L4c.  After this,
typing
  make clean
should clear out any intermediate build files.

#####################################################################
#  USAGE
#####################################################################

Given an L4 program test.L4, the equivalent L3 code can be generated
by typing
  ./L4c test.L4

This should output the L3 code immediately.

If L4c is run with no filename on the command line, it reads the input
file from stdin.

The "-o" switch can be used to direct the output to a file, e.g.:
   ./L4c -o out.L3 test.L4

As a beta functionality, the L4c program can compile a binary using
the L3, L2, and L1 compiler stages:
  ./L4c -compile -o myapp test.L4
This produces an executable "myapp" using the local GNU compiler/
linker.  If the output filename is not specified, "a.out" is used.
