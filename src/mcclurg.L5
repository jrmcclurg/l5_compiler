;; SAT benchmarks from http://www.cs.ubc.ca/~hoos/SATLIB/benchm.html
(let ([ARRAY_MAX_ITEM 100000])
(let ([ARRAY_MIN_ITEM -100000])
(let ([TRIANGLE_TEST_ITERATIONS 100]) ;; 100
(let ([ADD_TEST_ITERATIONS 1000])     ;; 1000
(let ([DO_SAT_TEST 1])                ;; 1
(let ([DO_CONCAT_TEST 1])             ;; 1
(let ([clauses (new-tuple
(new-tuple 4 -18 19) 
(new-tuple 3 18 -5) 
(new-tuple -5 -8 -15) 
(new-tuple -20 7 -16) 
(new-tuple 10 -13 -7) 
(new-tuple -12 -9 17) 
(new-tuple 17 19 5) 
(new-tuple -16 9 15) 
(new-tuple 11 -5 -14) 
(new-tuple 18 -10 13) 
(new-tuple -3 11 12) 
(new-tuple -6 -17 -8) 
(new-tuple -18 14 1) 
(new-tuple -19 -15 10) 
(new-tuple 12 18 -19) 
(new-tuple -8 4 7) 
(new-tuple -8 -9 4) 
(new-tuple 7 17 -15) 
(new-tuple 12 -7 -14) 
(new-tuple -10 -11 8) 
(new-tuple 2 -15 -11) 
(new-tuple 9 6 1) 
(new-tuple -11 20 -17) 
(new-tuple 9 -15 13) 
(new-tuple 12 -7 -17) 
(new-tuple -18 -2 20) 
(new-tuple 20 12 4) 
(new-tuple 19 11 14) 
(new-tuple -16 18 -4) 
(new-tuple -1 -17 -19) 
(new-tuple -13 15 10) 
(new-tuple -12 -14 -13) 
(new-tuple 12 -14 -7) 
(new-tuple -7 16 10) 
(new-tuple 6 10 7) 
(new-tuple 20 14 -16) 
(new-tuple -19 17 11) 
(new-tuple -7 1 -20) 
(new-tuple -5 12 15) 
(new-tuple -4 -9 -13) 
(new-tuple 12 -11 -7) 
(new-tuple -5 19 -8) 
(new-tuple 1 16 17) 
(new-tuple 20 -14 -15) 
(new-tuple 13 -4 10) 
(new-tuple 14 7 10) 
(new-tuple -5 9 20) 
(new-tuple 10 1 -19) 
(new-tuple -16 -15 -1) 
(new-tuple 16 3 -11) 
(new-tuple -15 -10 4) 
(new-tuple 4 -15 -3) 
(new-tuple -10 -16 11) 
(new-tuple -8 12 -5) 
(new-tuple 14 -6 12) 
(new-tuple 1 6 11) 
(new-tuple -13 -5 -1) 
(new-tuple -7 -2 12) 
(new-tuple 1 -20 19) 
(new-tuple -2 -13 -8) 
(new-tuple 15 18 4) 
(new-tuple -11 14 9) 
(new-tuple -6 -15 -2) 
(new-tuple 5 -12 -15) 
(new-tuple -6 17 5) 
(new-tuple -13 5 -19) 
(new-tuple 20 -1 14) 
(new-tuple 9 -17 15) 
(new-tuple -5 19 -18) 
(new-tuple -12 8 -10) 
(new-tuple -18 14 -4) 
(new-tuple 15 -9 13) 
(new-tuple 9 -5 -1) 
(new-tuple 10 -19 -14) 
(new-tuple 20 9 4) 
(new-tuple -9 -2 19) 
(new-tuple -5 13 -17) 
(new-tuple 2 -10 -18) 
(new-tuple -18 3 11) 
(new-tuple 7 -9 17) 
(new-tuple -15 -6 -3) 
(new-tuple -2 3 -13) 
(new-tuple 12 3 -2) 
(new-tuple -2 -3 17) 
(new-tuple 20 -15 -16) 
(new-tuple -5 -17 -19) 
(new-tuple -20 -18 11) 
(new-tuple -9 1 -5) 
(new-tuple -19 9 17) 
(new-tuple 12 -2 17) 
(new-tuple 4 -16 -5)
)])
(let ([clauses_unsat
(new-tuple
(new-tuple  18 -8 29)
(new-tuple -16 3 18)
(new-tuple -36 -11 -30)
(new-tuple -50 20 32)
(new-tuple -6 9 35)
(new-tuple 42 -38 29)
(new-tuple 43 -15 10)
(new-tuple -48 -47 1)
(new-tuple -45 -16 33)
(new-tuple 38 42 22)
(new-tuple -49 41 -34)
(new-tuple 12 17 35)
(new-tuple 22 -49 7)
(new-tuple -10 -11 -39)
(new-tuple -28 -36 -37)
(new-tuple -13 -46 -41)
(new-tuple 21 -4 9)
(new-tuple 12 48 10)
(new-tuple 24 23 15)
(new-tuple -8 -41 -43)
(new-tuple -44 -2 -35)
(new-tuple -27 18 31)
(new-tuple 47 35 6)
(new-tuple -11 -27 41)
(new-tuple -33 -47 -45)
(new-tuple -16 36 -37)
(new-tuple 27 -46 2)
(new-tuple 15 -28 10)
(new-tuple -38 46 -39)
(new-tuple -33 -4 24)
(new-tuple -12 -45 50)
(new-tuple -32 -21 -15)
(new-tuple 8 42 24)
(new-tuple 30 -49 4)
(new-tuple 45 -9 28)
(new-tuple -33 -47 -1)
(new-tuple 1 27 -16)
(new-tuple -11 -17 -35)
(new-tuple -42 -15 45)
(new-tuple -19 -27 30)
(new-tuple 3 28 12)
(new-tuple 48 -11 -33)
(new-tuple -6 37 -9)
(new-tuple -37 13 -7)
(new-tuple -2 26 16)
(new-tuple 46 -24 -38)
(new-tuple -13 -24 -8)
(new-tuple -36 -42 -21)
(new-tuple -37 -19 3)
(new-tuple -31 -50 35)
(new-tuple -7 -26 29)
(new-tuple -42 -45 29)
(new-tuple 33 25 -6)
(new-tuple -45 -5 7)
(new-tuple -7 28 -6)
(new-tuple -48 31 -11)
(new-tuple 32 16 -37)
(new-tuple -24 48 1)
(new-tuple 18 -46 23)
(new-tuple -30 -50 48)
(new-tuple -21 39 -2)
(new-tuple 24 47 42)
(new-tuple -36 30 4)
(new-tuple -5 28 -1)
(new-tuple -47 32 -42)
(new-tuple 16 37 -22)
(new-tuple -43 42 -34)
(new-tuple -40 39 -20)
(new-tuple -49 29 6)
(new-tuple -41 -3 39)
(new-tuple -16 -12 43)
(new-tuple 24 22 3)
(new-tuple 47 -45 43)
(new-tuple 45 -37 46)
(new-tuple -9 26 5)
(new-tuple -3 23 -13)
(new-tuple 5 -34 13)
(new-tuple 12 39 13)
(new-tuple 22 50 37)
(new-tuple 19 9 46)
(new-tuple -24 8 -27)
(new-tuple -28 7 21)
(new-tuple 8 -25 50)
(new-tuple 20 50 4)
(new-tuple 27 36 13)
(new-tuple 26 31 -25)
(new-tuple 39 -44 -32)
(new-tuple -20 41 -10)
(new-tuple 49 -28 35)
(new-tuple 1 44 34)
(new-tuple 39 35 -11)
(new-tuple -50 -42 -7)
(new-tuple -24 7 47)
(new-tuple -13 5 -48)
(new-tuple -9 -20 -23)
(new-tuple 2 17 -19)
(new-tuple 11 23 21)
(new-tuple -45 30 15)
(new-tuple 11 26 -24)
(new-tuple 38 33 -13)
(new-tuple 44 -27 -7)
(new-tuple 41 49 2)
(new-tuple -18 12 -37)
(new-tuple -2 12 -26)
(new-tuple -19 7 32)
(new-tuple -22 11 33)
(new-tuple 8 12 -20)
(new-tuple 16 40 -48)
(new-tuple -2 -24 -11)
(new-tuple 26 -17 37)
(new-tuple -14 -19 46)
(new-tuple 5 47 36)
(new-tuple -29 -9 19)
(new-tuple 32 4 28)
(new-tuple -34 20 -46)
(new-tuple -4 -36 -13)
(new-tuple -15 -37 45)
(new-tuple -21 29 23)
(new-tuple -6 -40 7)
(new-tuple -42 31 -29)
(new-tuple -36 24 31)
(new-tuple -45 -37 -1)
(new-tuple 3 -6 -29)
(new-tuple -28 -50 27)
(new-tuple 44 26 5)
(new-tuple -17 -48 49)
(new-tuple 12 -40 -7)
(new-tuple -12 31 -48)
(new-tuple 27 32 -42)
(new-tuple -27 -10 1)
(new-tuple 6 -49 10)
(new-tuple -24 8 43)
(new-tuple 23 31 1)
(new-tuple 11 -47 38)
(new-tuple -28 26 -13)
(new-tuple -40 12 -42)
(new-tuple -3 39 46)
(new-tuple 17 41 46)
(new-tuple 23 21 13)
(new-tuple -14 -1 -38)
(new-tuple 20 18 6)
(new-tuple -50 20 -9)
(new-tuple 10 -32 -18)
(new-tuple -21 49 -34)
(new-tuple 44 23 -35)
(new-tuple 40 -19 34)
(new-tuple -1 6 -12)
(new-tuple 6 -2 -7)
(new-tuple 32 -20 34)
(new-tuple -12 43 -29)
(new-tuple 24 2 -49)
(new-tuple 10 -4 40)
(new-tuple 11 5 12)
(new-tuple -3 47 -31)
(new-tuple 43 -23 21)
(new-tuple -41 -36 -50)
(new-tuple -8 -42 -24)
(new-tuple 39 45 7)
(new-tuple 7 37 -45)
(new-tuple 41 40 8)
(new-tuple -50 -10 -8)
(new-tuple -5 -39 -14)
(new-tuple -22 -24 -43)
(new-tuple -36 40 35)
(new-tuple 17 49 41)
(new-tuple -32 7 24)
(new-tuple -30 -8 -9)
(new-tuple -41 -13 -10)
(new-tuple 31 26 -33)
(new-tuple 17 -22 -39)
(new-tuple -21 28 3)
(new-tuple -14 46 23)
(new-tuple 29 16 19)
(new-tuple 42 -32 -44)
(new-tuple -24 10 23)
(new-tuple -1 -32 -21)
(new-tuple -8 -44 -39)
(new-tuple 39 11 9)
(new-tuple 19 14 -46)
(new-tuple 46 44 -42)
(new-tuple 37 23 -29)
(new-tuple 32 25 20)
(new-tuple 14 -43 -12)
(new-tuple -36 -18 46)
(new-tuple 14 -26 -10)
(new-tuple -2 -30 5)
(new-tuple 6 -18 46)
(new-tuple -26 2 -44)
(new-tuple 20 -8 -11)
(new-tuple -31 3 16)
(new-tuple -22 -9 39)
(new-tuple -49 44 -42)
(new-tuple -45 -44 31)
(new-tuple -31 50 -11)
(new-tuple -32 -46 2)
(new-tuple -6 -7 17)
(new-tuple 19 -32 48)
(new-tuple 39 20 -10)
(new-tuple -22 -37 38)
(new-tuple -31 9 -48)
(new-tuple 40 12 7)
(new-tuple -24 -4 9)
(new-tuple -22 49 33)
(new-tuple -12 43 10)
(new-tuple 25 -30 -10)
(new-tuple 46 47 31)
(new-tuple 13 27 -7)
(new-tuple -45 32 -35)
(new-tuple -50 34 9)
(new-tuple 2 34 30)
(new-tuple 3 16 2)
(new-tuple -18 45 -12)
(new-tuple 33 37 10)
(new-tuple 43 7 -18)
(new-tuple -22 44 -19)
(new-tuple -31 -27 -42)
(new-tuple -3 -40 8)
(new-tuple -23 -31 38) )
])
(let ([clauses3
(new-tuple
(new-tuple  -10 -16 5)
(new-tuple 16 -6 5)
(new-tuple -17 -14 -18)
(new-tuple -10 -15 19)
(new-tuple -1 -9 -18)
(new-tuple 3 7 -6)
(new-tuple -13 1 6)
(new-tuple -2 -16 -20)
(new-tuple 7 8 18)
(new-tuple -7 10 -20)
(new-tuple 2 -14 -17)
(new-tuple 2 1 19)
(new-tuple 7 -20 -1)
(new-tuple -11 1 -17)
(new-tuple 3 -12 19)
(new-tuple -3 -13 6)
(new-tuple -13 3 -12)
(new-tuple 5 -7 -12)
(new-tuple 20 8 -16)
(new-tuple -13 -6 19)
(new-tuple -5 1 14)
(new-tuple 9 -5 18)
(new-tuple -12 -17 -1)
(new-tuple -20 -16 19)
(new-tuple 12 10 -11)
(new-tuple 6 -7 -2)
(new-tuple 13 -10 17)
(new-tuple -20 8 -16)
(new-tuple -10 -1 -8)
(new-tuple -7 -3 19)
(new-tuple 19 -1 -6)
(new-tuple 19 -2 13)
(new-tuple -2 20 -9)
(new-tuple -8 -20 16)
(new-tuple -13 -1 11)
(new-tuple 15 -12 -6)
(new-tuple -17 -19 9)
(new-tuple 19 -18 16)
(new-tuple 7 -8 -19)
(new-tuple -3 -7 -1)
(new-tuple 7 -17 -16)
(new-tuple -2 -14 1)
(new-tuple -18 -10 -8)
(new-tuple -16 5 8)
(new-tuple 4 8 10)
(new-tuple -20 -11 -19)
(new-tuple 8 -16 -6)
(new-tuple 18 12 8)
(new-tuple -5 -20 -10)
(new-tuple 16 17 3)
(new-tuple 7 -1 -17)
(new-tuple 17 -4 7)
(new-tuple 20 -9 -13)
(new-tuple 13 18 16)
(new-tuple -16 -6 5)
(new-tuple 5 17 7)
(new-tuple -12 -17 -6)
(new-tuple -20 19 -5)
(new-tuple 9 -19 16)
(new-tuple -13 -16 11)
(new-tuple -4 -19 -18)
(new-tuple -13 10 -15)
(new-tuple 16 -7 -14)
(new-tuple -19 -7 -18)
(new-tuple -20 5 13)
(new-tuple 12 -6 4)
(new-tuple 7 9 -13)
(new-tuple 16 3 7)
(new-tuple 9 -1 12)
(new-tuple -3 14 7)
(new-tuple 1 15 14)
(new-tuple -8 -11 18)
(new-tuple 19 -9 7)
(new-tuple -10 6 2)
(new-tuple 14 18 -11)
(new-tuple -9 -16 14)
(new-tuple 1 11 -20)
(new-tuple 11 12 -4)
(new-tuple 13 -11 -14)
(new-tuple 17 -12 9)
(new-tuple 14 9 1)
(new-tuple 8 19 4)
(new-tuple 6 -13 -20)
(new-tuple -2 -13 11)
(new-tuple 14 -13 17)
(new-tuple 9 -11 18)
(new-tuple -13 -6 5)
(new-tuple 5 19 -18)
(new-tuple -4 10 11)
(new-tuple -18 -19 -20)
(new-tuple 3 -9 8) )
])
(let ([and (lambda (a b) (if a b 0))])
(let ([or (lambda (a b) (if a 1 b))])
(let ([copy (lambda (src sindex dest dindex num)
   (letrec ([f (lambda (k)
      (if (or (<= (alen src) (+ k sindex)) (or (<= (alen dest) (+ k dindex)) (<= num k))) k
         (begin (aset dest (+ k dindex) (aref src (+ k sindex))) (f (+ k 1)))))]) (f 0)) )])
(let ([hd (lambda (arr) (aref arr 0))])
(let ([tl (lambda (arr)
   (let ([len (alen arr)])
      (if (= len 0) (new-tuple)
         (let ([n (new-array (- len 1) 0)])
	    (begin (copy arr 1 n 0 (- len 1)) n)))) )])
(let ([prepend (lambda (a arr) (let ([len (alen arr)])
   (let ([na (new-array (+ len 1) a)]) (begin (copy arr 0 na 1 len) na))))])
(let ([append (lambda (a arr) (let ([len (alen arr)])
   (let ([na (new-array (+ len 1) a)]) (begin (copy arr 0 na 0 len) na))))])
(letrec ([concat (lambda (arr1 arr2) (if (<= (alen arr2) 0) arr1
   (let ([narr1 (append (hd arr2) arr1)]) (let ([narr2 (tl arr2)]) (concat narr1 narr2) )) ))])
(let ([min (lambda (a b) (if (< a b) a b))])
(let ([max (lambda (a b) (if (< a b) b a))])
(letrec ([amin (lambda (arr) (if (<= (alen arr) 0) ARRAY_MAX_ITEM (min (hd arr) (amin (tl arr)))))])
(letrec ([amax (lambda (arr) (if (<= (alen arr) 0) ARRAY_MIN_ITEM (max (hd arr) (amax (tl arr)))))])
(letrec ([find_helper (lambda (arr target index)
   (if (<= (alen arr) 0) -1 (if (= (hd arr) target) index (find_helper (tl arr) target (+ index 1)))))])
(letrec ([find (lambda (arr target) (find_helper arr target 0))])
(letrec ([sort (lambda (arr) (if (<= (alen arr) 0) (new-tuple)
   (let ([rest (tl arr)]) (let ([m (amin rest)]) (let ([index (find rest m)]) (if (<= (hd arr) m)
      (prepend (hd arr) (sort rest))
      (begin (aset rest index (hd arr)) (prepend m (sort rest)))))))))])
(letrec ([checksum (lambda (arr) (if (<= (alen arr) 0) 0 (+ (hd arr) (checksum (tl arr)))))])
(letrec ([reverse (lambda (arr) (if (<= (alen arr) 0) (new-tuple) (append (hd arr) (reverse (tl arr)))))])
(letrec ([mk_count_tuple (lambda (k) (if (<= k 0) (new-tuple) (append k (mk_count_tuple (- k 1)))))])
(let ([mk_triangle_tuple (lambda (k) (let ([t (mk_count_tuple k)]) (concat t (tl (reverse t)))))])
(letrec ([triangle_test (lambda (k)
   (if (<= k 0) 0
   (let ([t (mk_triangle_tuple k)])
   (let ([check1 (* 2 (checksum t))])
   (let ([t2 (concat t t)])
   (let ([t3 (reverse t2)])
   (let ([t4 (sort t3)])
   (let ([t5 (reverse t4)])
   (let ([t6 (sort t5)])
   (let ([check2 (checksum t6)]) (+ (- check1 check2) (triangle_test (- k 1)))))))))))))])
(letrec ([abs (lambda (x) (if (< 0 x) x (- 0 x)))])
(letrec ([clause_contains (lambda (cs x) (if (<= (alen cs) 0) 0 (if (= (abs (hd cs)) (abs x)) 1 (clause_contains (tl cs) x))))])
(letrec ([concat_all (lambda (l) (if (<= (alen l) 0) (new-tuple) (concat (hd l) (concat_all (tl l)))))])
(letrec ([get_all_vars_helper (lambda (l) (if (<= (alen l) 0) (new-tuple)
   (let ([x (abs (hd l))])
   (let ([y (get_all_vars_helper (tl l))]) (if (clause_contains y x) y (prepend x y))))))])
(let ([get_all_vars (lambda (cs) (let ([l (concat_all cs)]) (reverse (sort (get_all_vars_helper l)))))])
(letrec ([clause_union_helper (lambda (ab) (if (<= (alen ab) 0) (new-tuple)
   (let ([rest (clause_union_helper (tl ab))]) (if (clause_contains rest (hd ab)) rest (prepend (hd ab) rest)))))])
(let ([clause_union (lambda (a b) (clause_union_helper (concat a b)))])
(letrec ([clause_diff (lambda (a b) (if (<= (alen a) 0) (new-tuple)
   (let ([rest (clause_diff (tl a) b)]) (if (or (clause_contains b (hd a))
      (clause_contains rest (hd a))) rest (prepend (hd a) rest)))))])
(letrec ([propagate_literal (lambda (clause lit) (if (<= (alen clause) 0) (new-tuple (new-tuple) -1)
   (let ([head (hd clause)]) (let ([rest_res (propagate_literal (tl clause) lit)])
      (let ([rest (aref rest_res 0)])
      (let ([res (aref rest_res 1)]) (if (= lit (- 0 head)) (new-tuple rest (if (<= 0 res) res -1))
         (new-tuple (prepend head rest) (if (or (= lit head) (= res 1)) 1 0)))))))))])
(letrec ([propagate_to_clause (lambda (clause temp_answer) (if (<= (alen clause) 0) (new-tuple (new-tuple) -1)
   (if (<= (alen temp_answer) 0) (new-tuple clause 0) (let ([x_res (propagate_literal clause (hd temp_answer))])
      (let ([x (aref x_res 0)]) (let ([res (aref x_res 1)]) (let ([y_res2 (propagate_to_clause x (tl temp_answer))])
         (let ([y (aref y_res2 0)]) (let ([res2 (aref y_res2 1)])
            (new-tuple y (if (or (= res 1) (= res2 1)) 1 (if (= res2 -1) -1 0))))))))))))])
(letrec ([propagate (lambda (clauses temp_answer) (if (<= (alen clauses) 0) (new-tuple (new-tuple) 1)
   (let ([x_res (propagate_to_clause (hd clauses) temp_answer)]) (let ([x (aref x_res 0)]) (let ([res (aref x_res 1)])
      (let ([x2_res2 (propagate (tl clauses) temp_answer)]) (let ([x2 (aref x2_res2 0)]) (let ([res2 (aref x2_res2 1)])
         (new-tuple (clause_diff (clause_union (if (= (alen x) 1) x (new-tuple)) x2) temp_answer)
         (if (and (= res 1) (= res2 1)) 1 (if (or (= res -1) (= res2 -1)) -1 0)))))))))))])
(letrec ([add_guess (lambda (temp_answer flags literals) (if (<= (alen literals) 0) (new-tuple temp_answer flags 0)
   (let ([rest_flags_b (add_guess temp_answer flags (tl literals))])
      (let ([rest (aref rest_flags_b 0)]) (let ([rest_flags (aref rest_flags_b 1)]) (let ([b (aref rest_flags_b 2)])
      (if (or (clause_contains temp_answer (hd literals)) b) (new-tuple rest rest_flags b)
         (new-tuple (append (hd literals) rest) (append 1 rest_flags) 1))))))))])
(letrec ([add_propagated (lambda (temp_answer flags to_add) (if (<= (alen to_add) 0) (new-tuple temp_answer flags)
   (let ([ans2_flags2 (add_propagated temp_answer flags (tl to_add))])
      (let ([ans2 (aref ans2_flags2 0)]) (let ([flags2 (aref ans2_flags2 1)])
      (new-tuple (append (hd to_add) ans2) (append 0 flags2)))))))])
(letrec ([undo_guess (lambda (temp_answer flags) (if (<= (alen temp_answer) 0) (new-tuple temp_answer flags 0)
   (let ([ans2_flags2_t (undo_guess (tl temp_answer) (tl flags))])
   (let ([ans2 (aref ans2_flags2_t 0)]) (let ([flags2 (aref ans2_flags2_t 1)]) (let ([t (aref ans2_flags2_t 2)])
   (if t (new-tuple (prepend (hd temp_answer) ans2) (prepend (hd flags) flags2) t)
      (if (= (hd flags) 1) (new-tuple (append (- 0 (hd temp_answer)) ans2) (append (+ (hd flags) 1) flags2) 1)
         (new-tuple ans2 flags2 t)))))))))])
(letrec ([sat_helper (lambda (clauses temp_answer temp_answer_flags literals n)
   (let ([add_guess_result (add_guess temp_answer temp_answer_flags literals)])
   (let ([temp_answer2 (aref add_guess_result 0)]) (let ([temp_answer_flags2 (aref add_guess_result 1)])
   (let ([res_x (propagate clauses temp_answer2)]) (let ([res (aref res_x 0)]) (let ([x (aref res_x 1)])
   (if (= x 1) (new-tuple 1 (clause_union temp_answer2 res) n)
      (if (or (= x -1) (= (alen temp_answer2) (alen literals)))
         (let ([undo_guess_result (undo_guess temp_answer2 temp_answer_flags2)])
         (let ([temp_answer3 (aref undo_guess_result 0)]) (let ([temp_answer_flags3 (aref undo_guess_result 1)])
         (if (<= (alen temp_answer3) 0) (new-tuple 0 (new-tuple) n)
            (sat_helper clauses temp_answer3 temp_answer_flags3 literals (+ n 1))))))
         (let ([add_prop_result (add_propagated temp_answer2 temp_answer_flags2 res)])
         (let ([new_answer (aref add_prop_result 0)]) (let ([new_answer_flags (aref add_prop_result 1)])
         (sat_helper clauses new_answer new_answer_flags literals (+ n 1))))))))))))))])
(let ([sat (lambda (clauses) (let ([literals (get_all_vars clauses)])
   (let ([sat_result (sat_helper clauses (new-tuple) (new-tuple) literals 1)])
   (let ([is_sat (aref sat_result 0)]) (let ([assignment (aref sat_result 1)]) (let ([n (aref sat_result 2)])
   (begin (print n) (new-tuple is_sat (sort assignment)))))))))])
(let ([sat2 (lambda (clauses literals)
   (let ([sat_result (sat_helper clauses (new-tuple) (new-tuple) literals 1)])
   (let ([is_sat (aref sat_result 0)]) (let ([assignment (aref sat_result 1)]) (let ([n (aref sat_result 2)])
   (begin (print n) (new-tuple is_sat (sort assignment))))))))])
(letrec ([add_test (lambda (x num) (if (<= num 0) 0
   (+ (add_test x (- num 1)) (+ (+ (+ (+ (+ (+ (+ (+ x x) (+ x x)) (+ (+ x (+ (+ (+ (+ (+ (+ (+ (+ x x) (+ x x))
   (+ (+ x x) (+ x x))) (+ (+ (+ x x) (+ x x)) (+ (+ x x) (+ x x)))) x) (+ x x)) (+ (+ x x)
   (+ x x))) (+ (+ (+ x x) (+ x x)) (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ x x) (+ x x)) (+ (+ x (+ (+ (+ (+ (+ (+ (+ (+ x x) (+ x x))
   (+ (+ x x) (+ x x))) (+ (+ (+ x x) (+ x x)) (+ (+ x x) (+ x x)))) x) (+ x x)) (+ (+ x x)
   (+ x x))) (+ (+ (+ x x) (+ x x)) (+ (+ x x) (+ x x))))) (+ x x))) (+ (+ (+ x x) (+ x x))
   (+ (+ x x) (+ x x)))) x) (+ x x)) (+ (+ x x) (+ x x))) (+ (+ (+ x x) (+ x x)) (+ (+ x x) (+ x x)))) x)
   (+ x x))))) (+ x x))) (+ (+ (+ x x) (+ x x))
   (+ (+ x x) (+ x x)))) x) (+ x x)) (+ (+ x x) (+ x x))) (+ (+ (+ x x) (+ x x)) (+ (+ x x) (+ x x)))) )))])
(letrec ([concat_test (lambda (lists)
   (let ([all (concat_all lists)])
   (let ([rev (reverse all)])
   (let ([s1 (sort all)])
   (let ([s1 (sort rev)]) (checksum s1))))))])
(let ([test1 (new-tuple 1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1)])
(let ([test2 (new-array 10 2)])
(let ([temp (copy test1 0 test2 5 7)])
(let ([test3 (prepend 123 (tl test1))])
(let ([test4 (concat test1 test3)])
(let ([the_min (amax test1)])
(let ([the_index (find test4 123)])
(let ([the_sorted (sort test4)])
(let ([the_check (checksum test2)])
(let ([the_rev (reverse test4)])
(let ([the_inc (mk_triangle_tuple 11)])
(let ([the_rev2 (reverse the_inc)])
(let ([t (triangle_test TRIANGLE_TEST_ITERATIONS)])
(let ([t2 (if DO_SAT_TEST (sat clauses) 0)])
(let ([t2_2 (if DO_SAT_TEST (sat2 clauses (reverse (get_all_vars clauses))) 0)])
(let ([t2_3 (if DO_SAT_TEST (sat clauses3) 0)])
(let ([t3 (add_test 123 ADD_TEST_ITERATIONS)])
(let ([t4 (if DO_CONCAT_TEST (concat_test clauses) 0)])
(begin (print t2)
(begin (print t2_2)
(begin (print t2_3)
(begin (print t)
(begin (print t3)
(print t4)))))))
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
