(let ([ARRAY_MAX_ITEM 100000])
(let ([ARRAY_MIN_ITEM -100000])
(let ([TRIANGLE_TEST_ITERATIONS 50]) ;; 50
(let ([clauses (new-tuple
(new-tuple 4 -18 19) 
(new-tuple 3 18 -5) 
(new-tuple -5 -8 -15) 
(new-tuple -20 7 -16) 
(new-tuple 10 -13 -7) 
(new-tuple -12 -9 17) 
(new-tuple 17 19 5) 
(new-tuple -16 9 15) 
(new-tuple 11 -5 -14) 
(new-tuple 18 -10 13) 
(new-tuple -3 11 12) 
(new-tuple -6 -17 -8) 
(new-tuple -18 14 1) 
(new-tuple -19 -15 10) 
(new-tuple 12 18 -19) 
(new-tuple -8 4 7) 
(new-tuple -8 -9 4) 
(new-tuple 7 17 -15) 
(new-tuple 12 -7 -14) 
(new-tuple -10 -11 8) 
(new-tuple 2 -15 -11) 
(new-tuple 9 6 1) 
(new-tuple -11 20 -17) 
(new-tuple 9 -15 13) 
(new-tuple 12 -7 -17) 
(new-tuple -18 -2 20) 
(new-tuple 20 12 4) 
(new-tuple 19 11 14) 
(new-tuple -16 18 -4) 
(new-tuple -1 -17 -19) 
(new-tuple -13 15 10) 
(new-tuple -12 -14 -13) 
(new-tuple 12 -14 -7) 
(new-tuple -7 16 10) 
(new-tuple 6 10 7) 
(new-tuple 20 14 -16) 
(new-tuple -19 17 11) 
(new-tuple -7 1 -20) 
(new-tuple -5 12 15) 
(new-tuple -4 -9 -13) 
(new-tuple 12 -11 -7) 
(new-tuple -5 19 -8) 
(new-tuple 1 16 17) 
(new-tuple 20 -14 -15) 
(new-tuple 13 -4 10) 
(new-tuple 14 7 10) 
(new-tuple -5 9 20) 
(new-tuple 10 1 -19) 
(new-tuple -16 -15 -1) 
(new-tuple 16 3 -11) 
(new-tuple -15 -10 4) 
(new-tuple 4 -15 -3) 
(new-tuple -10 -16 11) 
(new-tuple -8 12 -5) 
(new-tuple 14 -6 12) 
(new-tuple 1 6 11) 
(new-tuple -13 -5 -1) 
(new-tuple -7 -2 12) 
(new-tuple 1 -20 19) 
(new-tuple -2 -13 -8) 
(new-tuple 15 18 4) 
(new-tuple -11 14 9) 
(new-tuple -6 -15 -2) 
(new-tuple 5 -12 -15) 
(new-tuple -6 17 5) 
(new-tuple -13 5 -19) 
(new-tuple 20 -1 14) 
(new-tuple 9 -17 15) 
(new-tuple -5 19 -18) 
(new-tuple -12 8 -10) 
(new-tuple -18 14 -4) 
(new-tuple 15 -9 13) 
(new-tuple 9 -5 -1) 
(new-tuple 10 -19 -14) 
(new-tuple 20 9 4) 
(new-tuple -9 -2 19) 
(new-tuple -5 13 -17) 
(new-tuple 2 -10 -18) 
(new-tuple -18 3 11) 
(new-tuple 7 -9 17) 
(new-tuple -15 -6 -3) 
(new-tuple -2 3 -13) 
(new-tuple 12 3 -2) 
(new-tuple -2 -3 17) 
(new-tuple 20 -15 -16) 
(new-tuple -5 -17 -19) 
(new-tuple -20 -18 11) 
(new-tuple -9 1 -5) 
(new-tuple -19 9 17) 
(new-tuple 12 -2 17) 
(new-tuple 4 -16 -5)
)])
(let ([and (lambda (a b) (if a b 0))])
(let ([or (lambda (a b) (if a 1 b))])
(let ([copy (lambda (src sindex dest dindex num)
   (letrec ([f (lambda (k)
      (if (or (<= (alen src) (+ k sindex)) (or (<= (alen dest) (+ k dindex)) (<= num k))) k
         (begin (aset dest (+ k dindex) (aref src (+ k sindex))) (f (+ k 1)))))]) (f 0)) )])
(let ([hd (lambda (arr) (aref arr 0))])
(let ([tl (lambda (arr)
   (let ([len (alen arr)])
      (if (= len 0) (new-tuple)
         (let ([n (new-array (- len 1) 0)])
	    (begin (copy arr 1 n 0 (- len 1)) n)))) )])
(let ([prepend (lambda (a arr) (let ([len (alen arr)])
   (let ([na (new-array (+ len 1) a)]) (begin (copy arr 0 na 1 len) na))))])
(let ([append (lambda (a arr) (let ([len (alen arr)])
   (let ([na (new-array (+ len 1) a)]) (begin (copy arr 0 na 0 len) na))))])
(letrec ([concat (lambda (arr1 arr2) (if (<= (alen arr2) 0) arr1
   (let ([narr1 (append (hd arr2) arr1)]) (let ([narr2 (tl arr2)]) (concat narr1 narr2) )) ))])
(let ([min (lambda (a b) (if (< a b) a b))])
(let ([max (lambda (a b) (if (< a b) b a))])
(letrec ([amin (lambda (arr) (if (<= (alen arr) 0) ARRAY_MAX_ITEM (min (hd arr) (amin (tl arr)))))])
(letrec ([amax (lambda (arr) (if (<= (alen arr) 0) ARRAY_MIN_ITEM (max (hd arr) (amax (tl arr)))))])
(letrec ([find_helper (lambda (arr target index)
   (if (<= (alen arr) 0) -1 (if (= (hd arr) target) index (find_helper (tl arr) target (+ index 1)))))])
(letrec ([find (lambda (arr target) (find_helper arr target 0))])
(letrec ([sort (lambda (arr) (if (<= (alen arr) 0) (new-tuple)
   (let ([rest (tl arr)]) (let ([m (amin rest)]) (let ([index (find rest m)]) (if (<= (hd arr) m)
      (prepend (hd arr) (sort rest))
      (begin (aset rest index (hd arr)) (prepend m (sort rest)))))))))])
(letrec ([checksum (lambda (arr) (if (<= (alen arr) 0) 0 (+ (hd arr) (checksum (tl arr)))))])
(letrec ([reverse (lambda (arr) (if (<= (alen arr) 0) (new-tuple) (append (hd arr) (reverse (tl arr)))))])
(letrec ([mk_count_tuple (lambda (k) (if (<= k 0) (new-tuple) (append k (mk_count_tuple (- k 1)))))])
(let ([mk_triangle_tuple (lambda (k) (let ([t (mk_count_tuple k)]) (concat t (tl (reverse t)))))])
(letrec ([triangle_test (lambda (k)
   (if (<= k 0) 0
   (let ([t (mk_triangle_tuple k)])
   (let ([check1 (* 2 (checksum t))])
   (let ([t2 (concat t t)])
   (let ([t3 (reverse t2)])
   (let ([t4 (sort t3)])
   (let ([t5 (reverse t4)])
   (let ([t6 (sort t5)])
   (let ([check2 (checksum t6)]) (+ (- check1 check2) (triangle_test (- k 1)))))))))))))])
(letrec ([abs (lambda (x) (if (< 0 x) x (- 0 x)))])
(letrec ([clause_contains (lambda (cs x) (if (<= (alen cs) 0) 0 (if (= (abs (hd cs)) (abs x)) 1 (clause_contains (tl cs) x))))])
(letrec ([concat_all (lambda (l) (if (<= (alen l) 0) (new-tuple) (concat (hd l) (concat_all (tl l)))))])
(letrec ([get_all_vars_helper (lambda (l) (if (<= (alen l) 0) (new-tuple)
   (let ([x (abs (hd l))])
   (let ([y (get_all_vars_helper (tl l))]) (if (clause_contains y x) y (prepend x y))))))])
(let ([get_all_vars (lambda (cs) (let ([l (concat_all cs)]) (reverse (sort (get_all_vars_helper l)))))])
(letrec ([clause_union_helper (lambda (ab) (if (<= (alen ab) 0) (new-tuple)
   (let ([rest (clause_union_helper (tl ab))]) (if (clause_contains rest (hd ab)) rest (prepend (hd ab) rest)))))])
(let ([clause_union (lambda (a b) (clause_union_helper (concat a b)))])
(letrec ([clause_diff (lambda (a b) (if (<= (alen a) 0) (new-tuple)
   (let ([rest (clause_diff (tl a) b)]) (if (or (clause_contains b (hd a))
      (clause_contains rest (hd a))) rest (prepend (hd a) rest)))))])
(letrec ([propagate_literal (lambda (clause lit) (if (<= (alen clause) 0) (new-tuple (new-tuple) -1)
   (let ([head (hd clause)]) (let ([rest_res (propagate_literal (tl clause) lit)])
      (let ([rest (aref rest_res 0)])
      (let ([res (aref rest_res 1)]) (if (= lit (- 0 head)) (new-tuple rest (if (<= 0 res) res -1))
         (new-tuple (prepend head rest) (if (or (= lit head) (= res 1)) 1 0)))))))))])
(letrec ([propagate_to_clause (lambda (clause temp_answer) (if (<= (alen clause) 0) (new-tuple (new-tuple) -1)
   (if (<= (alen temp_answer) 0) (new-tuple clause 0) (let ([x_res (propagate_literal clause (hd temp_answer))])
      (let ([x (aref x_res 0)]) (let ([res (aref x_res 1)]) (let ([y_res2 (propagate_to_clause x (tl temp_answer))])
         (let ([y (aref y_res2 0)]) (let ([res2 (aref y_res2 1)])
            (new-tuple y (if (or (= res 1) (= res2 1)) 1 (if (= res2 -1) -1 0))))))))))))])
(letrec ([propagate (lambda (clauses temp_answer) (if (<= (alen clauses) 0) (new-tuple (new-tuple) 1)
   (let ([x_res (propagate_to_clause (hd clauses) temp_answer)]) (let ([x (aref x_res 0)]) (let ([res (aref x_res 1)])
      (let ([x2_res2 (propagate (tl clauses) temp_answer)]) (let ([x2 (aref x2_res2 0)]) (let ([res2 (aref x2_res2 1)])
         (new-tuple (clause_diff (clause_union (if (= (alen x) 1) x (new-tuple)) x2) temp_answer)
         (if (and (= res 1) (= res2 1)) 1 (if (or (= res -1) (= res2 -1)) -1 0)))))))))))])
(letrec ([add_guess (lambda (temp_answer flags literals) (if (<= (alen literals) 0) (new-tuple temp_answer flags 0)
   (let ([rest_flags_b (add_guess temp_answer flags (tl literals))])
      (let ([rest (aref rest_flags_b 0)]) (let ([rest_flags (aref rest_flags_b 1)]) (let ([b (aref rest_flags_b 2)])
      (if (or (clause_contains temp_answer (hd literals)) b) (new-tuple rest rest_flags b)
         (new-tuple (append (hd literals) rest) (append 1 rest_flags) 1))))))))])
(letrec ([add_propagated (lambda (temp_answer flags to_add) (if (<= (alen to_add) 0) (new-tuple temp_answer flags)
   (let ([ans2_flags2 (add_propagated temp_answer flags (tl to_add))])
      (let ([ans2 (aref ans2_flags2 0)]) (let ([flags2 (aref ans2_flags2 1)])
      (new-tuple (append (hd to_add) ans2) (append 0 flags2)))))))])
(letrec ([undo_guess (lambda (temp_answer flags) (if (<= (alen temp_answer) 0) (new-tuple temp_answer flags 0)
   (let ([ans2_flags2_t (undo_guess (tl temp_answer) (tl flags))])
   (let ([ans2 (aref ans2_flags2_t 0)]) (let ([flags2 (aref ans2_flags2_t 1)]) (let ([t (aref ans2_flags2_t 2)])
   (if t (new-tuple (prepend (hd temp_answer) ans2) (prepend (hd flags) flags2) t)
      (if (= (hd flags) 1) (new-tuple (append (- 0 (hd temp_answer)) ans2) (append (+ (hd flags) 1) flags2) 1)
         (new-tuple ans2 flags2 t)))))))))])
(letrec ([sat_helper (lambda (clauses temp_answer temp_answer_flags literals n)
   (let ([add_guess_result (add_guess temp_answer temp_answer_flags literals)])
   (let ([temp_answer2 (aref add_guess_result 0)]) (let ([temp_answer_flags2 (aref add_guess_result 1)])
   (let ([res_x (propagate clauses temp_answer2)]) (let ([res (aref res_x 0)]) (let ([x (aref res_x 1)])
   (if (= x 1) (new-tuple 1 (clause_union temp_answer2 res) n)
      (if (or (= x -1) (= (alen temp_answer2) (alen literals)))
         (let ([undo_guess_result (undo_guess temp_answer2 temp_answer_flags2)])
         (let ([temp_answer3 (aref undo_guess_result 0)]) (let ([temp_answer_flags3 (aref undo_guess_result 1)])
         (if (<= (alen temp_answer3) 0) (new-tuple 0 (new-tuple) n)
            (sat_helper clauses temp_answer3 temp_answer_flags3 literals (+ n 1))))))
         (let ([add_prop_result (add_propagated temp_answer2 temp_answer_flags2 res)])
         (let ([new_answer (aref add_prop_result 0)]) (let ([new_answer_flags (aref add_prop_result 1)])
         (sat_helper clauses new_answer new_answer_flags literals (+ n 1))))))))))))))])
(let ([sat (lambda (clauses) (let ([literals (get_all_vars clauses)])
   (let ([sat_result (sat_helper clauses (new-tuple) (new-tuple) literals 1)])
   (let ([is_sat (aref sat_result 0)]) (let ([assignment (aref sat_result 1)]) (let ([n (aref sat_result 2)])
   (begin (print n) (new-tuple is_sat (sort assignment)))))))))])
(let ([test1 (new-tuple 1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1)])
(let ([test2 (new-array 10 2)])
(let ([temp (copy test1 0 test2 5 7)])
(let ([test3 (prepend 123 (tl test1))])
(let ([test4 (concat test1 test3)])
(let ([the_min (amax test1)])
(let ([the_index (find test4 123)])
(let ([the_sorted (sort test4)])
(let ([the_check (checksum test2)])
(let ([the_rev (reverse test4)])
(let ([the_inc (mk_triangle_tuple 11)])
(let ([the_rev2 (reverse the_inc)])
(let ([t (triangle_test TRIANGLE_TEST_ITERATIONS)])
(begin (print test4) (begin (print the_sorted) (begin (print (sat clauses)) (print t))))
)))))))))))))))))))))))))))))))))))))))))))))))))))))
