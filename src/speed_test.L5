(let ([ARRAY_MAX_ITEM 100000])
(let ([ARRAY_MIN_ITEM -100000])
(let ([or (lambda (a b) (if a 1 b))])
(let ([copy (lambda (src sindex dest dindex num)
   (letrec ([f (lambda (k)
      (if (or (<= (alen src) (+ k sindex)) (or (<= (alen dest) (+ k dindex)) (<= num k))) k
         (begin (aset dest (+ k dindex) (aref src (+ k sindex))) (f (+ k 1)))))]) (f 0)) )])
(let ([hd (lambda (arr) (aref arr 0))])
(let ([tl (lambda (arr)
   (let ([len (alen arr)])
      (if (= len 0) (new-tuple)
         (let ([n (new-array (- len 1) 0)])
	    (begin (copy arr 1 n 0 (- len 1)) n)))) )])
(let ([prepend (lambda (a arr) (let ([len (alen arr)])
   (let ([na (new-array (+ len 1) a)]) (begin (copy arr 0 na 1 len) na))))])
(let ([append (lambda (a arr) (let ([len (alen arr)])
   (let ([na (new-array (+ len 1) a)]) (begin (copy arr 0 na 0 len) na))))])
(letrec ([concat (lambda (arr1 arr2) (if (<= (alen arr2) 0) arr1
   (let ([narr1 (append (hd arr2) arr1)]) (let ([narr2 (tl arr2)]) (concat narr1 narr2) )) ))])
(let ([min (lambda (a b) (if (< a b) a b))])
(let ([max (lambda (a b) (if (< a b) b a))])
(letrec ([amin (lambda (arr) (if (<= (alen arr) 0) ARRAY_MAX_ITEM (min (hd arr) (amin (tl arr)))))])
(letrec ([amax (lambda (arr) (if (<= (alen arr) 0) ARRAY_MIN_ITEM (max (hd arr) (amax (tl arr)))))])
(letrec ([find_helper (lambda (arr target index)
   (if (<= (alen arr) 0) -1 (if (= (hd arr) target) index (find_helper (tl arr) target (+ index 1)))))])
(letrec ([find (lambda (arr target) (find_helper arr target 0))])
(letrec ([sort (lambda (arr) (if (<= (alen arr) 0) (new-tuple)
   (let ([rest (tl arr)]) (let ([m (amin rest)]) (let ([index (find rest m)]) (if (<= (hd arr) m)
      (prepend (hd arr) (sort rest))
      (begin (aset rest index (hd arr)) (prepend m (sort rest)))))))))])
(letrec ([checksum (lambda (arr) (if (<= (alen arr) 0) 0 (+ (hd arr) (checksum (tl arr)))))])
(letrec ([reverse (lambda (arr) (if (<= (alen arr) 0) (new-tuple) (append (hd arr) (reverse (tl arr)))))])
(letrec ([mk_count_tuple (lambda (k) (if (<= k 0) (new-tuple) (append k (mk_count_tuple (- k 1)))))])
(let ([mk_triangle_tuple (lambda (k) (let ([t (mk_count_tuple k)]) (concat t (tl (reverse t)))))])

(letrec ([triangle_test (lambda (k)
   (if (<= k 0) 0
   (let ([t (mk_triangle_tuple k)])
   (let ([check1 (* 2 (checksum t))])
   (let ([t2 (concat t t)])
   (let ([t3 (reverse t2)])
   (let ([t4 (sort t3)])
   (let ([t5 (reverse t4)])
   (let ([t6 (sort t5)])
   (let ([check2 (checksum t6)]) (+ (- check1 check2) (triangle_test (- k 1)))))))))))))])
(let ([test1 (new-tuple 1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1)])
(let ([test2 (new-array 10 2)])
(let ([temp (copy test1 0 test2 5 7)])
(let ([test3 (prepend 123 (tl test1))])
(let ([test4 (concat test1 test3)])
(let ([the_min (amax test1)])
(let ([the_index (find test4 123)])
(let ([the_sorted (sort test4)])
(let ([the_check (checksum test2)])
(let ([the_rev (reverse test4)])
(let ([the_inc (mk_triangle_tuple 11)])
(let ([the_rev2 (reverse the_inc)])
(let ([t (triangle_test 50)])
(begin (print 1) (begin (print 1) (begin (print 1) (print t))))
))))))))))))))))))))))))))))))))))
