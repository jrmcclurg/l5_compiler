(let ([or (lambda (a b) (if a 1 b))])
(let ([copy (lambda (src sindex dest dindex num)
   (letrec ([f (lambda (k)
      (if (or (<= (alen src) (+ k sindex)) (or (<= (alen dest) (+ k dindex)) (<= num k))) k
         (begin (aset dest (+ k dindex) (aref src (+ k sindex))) (f (+ k 1)))))]) (f 0)) )])
(let ([hd (lambda (arr) (aref arr 0))])
(let ([tl (lambda (arr)
   (let ([len (alen arr)])
      (if (= len 0) (new-tuple)
         (let ([n (new-array (- len 1) 0)])
	    (begin (copy arr 1 n 0 (- len 1)) n)))) )])
(let ([prepend (lambda (a arr) (let ([len (alen arr)])
   (let ([na (new-array (+ len 1) a)]) (begin (copy arr 0 na 1 len) na))))])
(let ([append (lambda (a arr) (let ([len (alen arr)])
   (let ([na (new-array (+ len 1) a)]) (begin (copy arr 0 na 0 len) na))))])
(letrec ([concat (lambda (arr1 arr2) (if (<= (alen arr2) 0) arr1
   (let ([narr1 (append (hd arr2) arr1)]) (let ([narr2 (tl arr2)]) (concat narr1 narr2) )) ))])
(let ([min (lambda (a b) (if (< a b) a b))])
(let ([max (lambda (a b) (if (< a b) b a))])
(letrec ([amin (lambda (arr) (if (<= (alen arr) 0) 1000000 (min (hd arr) (amin (tl arr)))))])
(letrec ([amax (lambda (arr) (if (<= (alen arr) 0) -1000000 (max (hd arr) (amax (tl arr)))))])
(letrec ([sort (lambda (arr) (if (<= (alen arr) 0) arr arr))])
(let ([test1 (new-array 10 1)])
(let ([test2 (new-array 20 2)])
(let ([temp (copy test1 0 test2 5 7)])
(let ([test3 (prepend 123 (tl test1))])
(let ([test4 (concat test1 test3)])
(begin (print test1) (begin (print test2) (begin (print test3) (print test4))))
)))))))))))))))))
